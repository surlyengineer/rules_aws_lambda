import argparse
import os
import re

from datetime import datetime
from zipfile import ZIP_DEFLATED
from zipfile import ZipFile
from zipfile import ZipInfo

ZIP_EPOCH = 315532800


def _get_argument_parser():
    parser = argparse.ArgumentParser(
        description='create a zip file', fromfile_prefix_chars='@'
    )

    parser.add_argument(
        '-o', '--output', type=str, help='The output zip file path.'
    )

    parser.add_argument(
        '-e', '--entrypoint', type=str, help='The entrypoint for the function',
    )

    parser.add_argument(
        '-t',
        '--timestamp',
        type=int,
        default=ZIP_EPOCH,
        help='The unix time to use for files added into the zip. values prior to'
        ' Jan 1, 1980 are ignored.',
    )

    parser.add_argument(
        '-s',
        '--stripprefix',
        type=str,
        help='The root of the executable',
    )

    parser.add_argument(
        '-P',
        '--extrapaths',
        type=str,
        help='Comma delimited list of extra paths',
    )

    parser.add_argument(
        '-D',
        '--delimiteddirs',
        type=str,
        help='Comma delimited list of provider dirs',
    )

    parser.add_argument(
        'files',
        type=str,
        nargs='*',
        help='Files to be added to the zip',
    )

    return parser


def _gen_path_loader(extras, paths, ref):
    bazel_generated = re.compile(r'bazel-ou.*bin')
    all_paths = []
    for path in paths.split(','):
        if bazel_generated.findall(path) and ref in path:
            all_paths += bazel_generated.findall(path)
        else:
            all_paths.append(path)
    preamble = """
##############################################################################
## ---- BEGIN AUTOGENERATED SECTION ----
## This preamble has been system generated and should not be altered
import sys

extra_paths = {}
for path in extra_paths:
    sys.path.append(path)
## ---- END AUTOGENERATED SECTION ----
##############################################################################
""".format(repr(set(all_paths)))
    return preamble

def parse_date(ts):
    ts = datetime.utcfromtimestamp(ts)
    return (ts.year, ts.month, ts.day, ts.hour, ts.minute, ts.second)


def main(args):
    unix_ts = max(ZIP_EPOCH, args.timestamp)
    ts = parse_date(unix_ts)
    with ZipFile(args.output, 'w') as _zip:
        main = args.entrypoint
        pre = args.stripprefix
        preamble = _gen_path_loader(args.delimiteddirs, args.extrapaths, pre)
        with open(main, 'rb') as entrypoint:
            path = os.path.relpath(main, pre)
            entry_info = ZipInfo(filename=path, date_time=ts)
            entry_info.external_attr = 0o777 << 16 #NB Python3 only
            entry_info.compress_type = ZIP_DEFLATED
            data = preamble.encode('utf-8') + b'\n' + entrypoint.read()
            _zip.writestr(entry_info, data)
        for _file in [f for f in args.files if not f == main]:
            entry_info = ZipInfo(filename=_file, date_time=ts)
            entry_info.external_attr = 0o777 << 16 #NB Python3 only
            entry_info.compress_type = ZIP_DEFLATED
            with open(_file, 'rb') as src:
                data = src.read()
                _zip.writestr(entry_info, data)

if __name__ == '__main__':
    parser = _get_argument_parser()
    args = parser.parse_args()
    main(args)
